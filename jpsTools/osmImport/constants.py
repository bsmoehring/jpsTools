'''
Created on 07.11.2017

@author: bsmoehring
'''


class osm(object):
    '''
    This class aims to store required strings to parse OSM data
    '''
    Id = 'id'
    Osm = 'osm'
    Node = 'node'
    Way = 'way'
    Relation = 'relation'
    Ref = 'ref'
    NodeRef = 'nd'
    Lat = 'lat'
    Lon = 'lon'
    Bounds = 'bounds'
    MinLat = 'minlat'
    MinLon = 'minlon'
    MaxLat = 'maxlat'
    MaxLon = 'maxlon'
    Level = 'level'
    Member = 'member'
    Type = 'type'
    Role = 'role'
    Outer = 'outer'
    Inner = 'inner'
    Key = 'k'
    Value = 'v'
    Tag = 'tag'
    Width = 'width'
    TransitStopFacility = 'TransitStopFacility'

class jps(object):
    '''
    This class aims to store required strings for the jps input files
    '''
    Obstacle = 'obstacle'
    JuPedSim = 'jupedsim'
    Geometry = 'geometry'
    Rooms = 'rooms'
    Room = 'room'
    Room_ID = 'room_id'
    Subroom = 'subroom'
    Subroom_ID = 'subroom_id'
    Polygon = 'polygon'
    Vertex = 'vertex'
    Id = 'id'
    Caption = 'caption'
    PX = 'px'
    PY = 'py'
    PZ = 'pz'
    Wall = 'wall'
    OriginalId = 'originalId'
    Transitions = 'transitions'
    Transition = 'transition'
    Crossing = 'crossing'
    Crossings = 'crossings'
    Type = 'type'
    Room1 = 'room1_id'
    Subroom1 = 'subroom1_id'
    Room2 = 'room2_id'
    Subroom2 = 'subroom2_id'
    OutsideTransitionRef = '-1'
    Goal = 'goal'
    Class = 'class'
    Stair = 'stair'
    A_x = 'A_x'
    B_y = 'B_y'
    C_z = 'C_z'
    Up = 'up'
    Down = 'down'
    Escalator = 'escalator'

class jpsReport(object):
    '''
    storing required strings for jpsReport input files
    '''
    MeasurementB = 'measurementB'
    MeasurementL = 'measurementL'
    Id = 'id'
    AreaB = 'area_B'
    AreaL = 'area_L'
    Type = 'type'
    BoundingBox = 'BoundingBox'
    Line = 'Line'
    ZPos = 'zPos'
    Measurement = 'measurement'
    X = 'x'
    Y = 'y'
    length_in_movement_direction = 'length_in_movement_direction'
    Distance = 'distance'
    Start = 'start'
    End = 'end'


